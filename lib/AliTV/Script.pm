package AliTV::Script;

use strict;
use warnings;

use FindBin::Real;
use lib FindBin::Real::Bin() . '/../lib';

use AliTV;

use Getopt::Long;
use Pod::Usage;

use Log::Log4perl;

use File::Temp;
use File::Basename;

use YAML;

sub run
{
    my $class = shift;

    my @params = @_;

    my $man = 0;
    my $help = 0;

    my ($project, $logfile, $output, $yml);
    my $overwrite = 0; # keeping existing files is default

    my @seq_files = ();

    Getopt::Long::GetOptionsFromArray(\@params,
	'help|?' => \$help,
	man => \$man,
	'project=s' => \$project,
	'logfile=s' => \$logfile,
	'output=s' => \$output,
	'overwrite|force!' => \$overwrite,
	) or pod2usage(2);

    pod2usage(-exitval => 0, -verbose => 2) if $man;
    pod2usage(1) if ($help || @params== 0);

    # Check if we have a single parameter left, which needs to be a
    # yml file or more than one parameter which should be sequence
    # files
    if (@params == 1)
    {
	# a yml file is given
	$yml = shift @params;

    } elsif (@params > 1) {
	# a sequence file set is given
	@seq_files = @params;

    } else {
	# should never happen... Therefore, print the help and exit
	print STDERR "\n\nERROR: Missing parameter! You need to specify a yml file or more than one sequence files\n\n";
	pod2usage(-exitval => 0, -verbose => 2);
    }

    # generate a uniq project name if not specified and a log file name
    # accordingly if also not specified
    ($project, $output, $logfile, $yml) = generate_filenames($project, $output, $logfile, $overwrite, $yml);

    # Log4Perl configuration
    my $conf = qq(
    log4perl.category                  = INFO, Logfile, Screen

    log4perl.appender.Logfile          = Log::Log4perl::Appender::File
    log4perl.appender.Logfile.filename = $logfile
    log4perl.appender.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
    log4perl.appender.Logfile.layout.ConversionPattern = [%r] %F %L %m%n

    log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
    log4perl.appender.Screen.stderr  = 1
    log4perl.appender.Screen.layout = Log::Log4perl::Layout::SimpleLayout
  );

    Log::Log4perl::init( \$conf );
    my $logger = Log::Log4perl->get_logger();

    # print a status message including a version information
    printf STDERR "
***********************************************************************
*                                                                     *
*  AliTV perl interface                                               *
*                                                                     *
***********************************************************************

You are using version %s.
", $AliTV::VERSION;

    if (@seq_files)
    {
	my $config = AliTV::get_default_settings();
	$config->{genomes} = [];

	foreach my $infile (@seq_files)
	{
	    push(@{$config->{genomes}}, {name => $infile, sequence_files => [ $infile ]});
	}

	YAML::DumpFile($yml, $config);

	$logger->info("Wrote temporary YAML file '$yml'");
    }

    my $obj = AliTV->new(-file => $yml, -project => $project);

    my $outputfh;

    if ($output eq "-" || $output eq "")
    {
	$outputfh = *STDOUT;
    } else {
	open($outputfh, ">", $output) || die "Unable to open file '$output' for writing: $!";
    }

    print $outputfh $obj->run();

    close($outputfh) || die "Unable to close file '$output' after writing: $!";

}

sub generate_filenames
{
    my ($project, $output, $logfile, $overwrite, $yml) = @_;

    # first define a project, if non is specified
    unless (defined $project)
    {
	# if no project name was specified, we are using the basename
	# of the yml file, if one is provided, if the $yml value is
	# not true, we assume, that we have a bunch of sequence file
	# and generate an autogenerated project name, which will be
	# used for the other files as basename
	if ($yml)
	{
	    $project = fileparse($yml, qr/\Q.yml\E/i);
	    warn "YML file specified, but no project name was specified, therefore the project name was set to '$project'!\n";
	} else {
	    my ($fh, $fn) = File::Temp::tempfile("autogen_XXXXXXX");
	    close($fh) || die "Unable to close file '$fn': $!\n";

	    # unlink the temporary file
	    unlink($fn) || die "Unable to delete file '$fn': $!\n";

	    $project = $fn;
	    warn "No YML file and no project name were specified! Assuming the usage of sequence files, Therefore, the project name autogenerated and set to '$project'!\n";
	}
    }

    # if no yml is specified, I need to set it based on the project name
    unless ($yml)
    {
	$yml = $project.".yml";
    }

    if (-e $yml)
    {
	if ($overwrite)
	{
	    warn "File '$yml' exists... But due to overwrite parameter is specified the file will be overwritten!\n";
	} else {
	    die "File '$yml' exists... Unless you specify --overwrite the file will not be overwritten!\n";
	}
    }

    unless (defined $output)
    {
	$output = $project.".json";

	if (-e $output)
	{
	    if ($overwrite)
	    {
		warn "File '$output' exists... But due to overwrite parameter is specified the file will be overwritten!\n";
	    } else {
		die "File '$output' exists... Unless you specify --overwrite the file will not be overwritten!\n";
	    }
	}
    }

    unless (defined $logfile)
    {
	$logfile = $project.".log";

	if (-e $logfile)
	{
	    warn "Log File '$logfile' exists... Log messages will be appended\n";
	}
    }

    return ($project, $output, $logfile, $yml);
}

sub logfile()
{
    my $logfile = shift;

    if (defined $logfile)
    {
	return $logfile;
    } else {
	return "logfile.log";
    }
}

1;
